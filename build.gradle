buildscript {
    ext {
        springBootVersion = "2.0.0.BUILD-SNAPSHOT"
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }

        maven { url "http://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
        classpath("se.transmode.gradle:gradle-docker:1.2")
    }
}

group = "jkramr"

apply plugin: "java"
apply plugin: "idea"
apply plugin: "docker"
apply plugin: "eclipse"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

apply plugin: "propdeps"
apply plugin: "propdeps-idea"

version = "0.0.1-SNAPSHOT"
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

bootRun {
    systemProperties System.properties as Map<String, ?>
}

task buildDocker(type: Docker, dependsOn: build) {
    push = true
    applicationName = jar.baseName
    dockerfile = file("src/main/docker/Dockerfile")
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

dependencies {

    /**
     * ----- Reactive Web -----
     */
    compile("org.springframework.boot:spring-boot-starter-webflux")

    /**
     * ----- Spring configuration parsing support -----
     */
    optional("org.springframework.boot:spring-boot-configuration-processor")

    /**
     * ----- In-memory database -----
     */
    runtime("com.h2database:h2")

    /**
     * ----- Lombok - boilerplate code generation -----
     */
    compileOnly("org.projectlombok:lombok")

    /**
     * ----- Test framework -----
     */
    testCompile("org.springframework.boot:spring-boot-starter-test")

    /**
     * ----- Logging framework -----
     */
    testCompile("org.springframework.boot:spring-boot-starter-log4j2")
}

compileJava.dependsOn(processResources)